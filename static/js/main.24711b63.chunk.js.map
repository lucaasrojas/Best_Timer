{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","interval","React","useState","min","sec","time","setTime","initialTime","setInitialTime","running","setRunning","progressPercentage","setProgressPercentage","KEY_FUNCTIONS","console","log","eventName","handler","element","window","savedHandler","useRef","useEffect","current","addEventListener","eventListener","event","removeEventListener","useEventListener","key","code","timeFromPath","getTimeFromPath","timeInSec","initialTimeInSec","setInterval","prevTime","clearInterval","response","pathname","location","replace","trim","split","parseInt","className","style","height","display","alignItems","justifyContent","position","background","transition","left","width","fontSize","top","right","bottom","marginLeft","marginRight","inset","toString","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.24711b63.chunk.js","sourcesContent":["import React, { useEffect, useRef, useCallback } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [time, setTime] = React.useState({ min: 0, sec: 0 })\n  const [initialTime, setInitialTime] = React.useState({ min: 0, sec: 0 })\n  const [running, setRunning] = React.useState(false)\n  const [progressPercentage, setProgressPercentage] = React.useState(0)\n  let interval\n\n  const KEY_FUNCTIONS = {\n    \"Space\": () => {\n      console.log('SPACE', running, time);\n\n      setRunning(!!!running)\n    }\n  }\n  const DEFAULT_KEY = () => null\n  function useEventListener(eventName, handler, element = window) {\n    // Create a ref that stores handler\n    const savedHandler = useRef();\n    // Update ref.current value if handler changes.\n    // This allows our effect below to always get latest handler ...\n    // ... without us needing to pass it in effect deps array ...\n    // ... and potentially cause effect to re-run every render.\n    useEffect(() => {\n      savedHandler.current = handler;\n    }, [handler]);\n    useEffect(\n      () => {\n        // Make sure element supports addEventListener\n        // On\n        const isSupported = element && element.addEventListener;\n        if (!isSupported) return;\n        // Create event listener that calls handler function stored in ref\n        const eventListener = (event) => savedHandler.current(event);\n        // Add event listener\n        element.addEventListener(eventName, eventListener);\n        // Remove event listener on cleanup\n        return () => {\n          element.removeEventListener(eventName, eventListener);\n        };\n      },\n      [eventName, element] // Re-run if eventName or element changes\n    );\n  }\n  useEventListener(\"keydown\", (key) => {\n    KEY_FUNCTIONS[key.code]() || DEFAULT_KEY()\n  })\n  React.useEffect(() => {\n    const timeFromPath = getTimeFromPath()\n    setTime(timeFromPath)\n    setInitialTime(timeFromPath)\n  }, [])\n\n  React.useEffect(() => {\n    console.log('TIME CHANGED', time);\n    const {min, sec} = time\n    const timeInSec = (min * 60) + sec\n    const initialTimeInSec = (initialTime.min * 60) + initialTime.sec\n    setProgressPercentage((timeInSec * 100) / initialTimeInSec)\n  }, [time])\n\n  React.useEffect(() => {\n    if (running && !interval) {\n      interval = setInterval(() => {\n        setTime(prevTime => {\n          if (prevTime.sec > 0) {\n            return { ...prevTime, sec: prevTime.sec - 1 }\n          } else if (prevTime.sec === 0 && prevTime.min > 0) {\n            return { min: prevTime.min - 1, sec: 59 }\n          } else {\n            setRunning(false)\n            clearInterval(interval)\n            return { min: 0, sec: 0 }\n          }\n        })\n      }, 1000)\n    }\n\n    return () => {\n      clearInterval(interval)\n    }\n\n  }, [running])\n\n  const getTimeFromPath = () => {\n    let response = { min: 0, sec: 0 }\n    let pathname = window.location.pathname.replace(\"/\", \"\");\n    if (pathname.trim()) {\n      pathname = pathname.replace(\"minutes\", '.').replace(\"seconds\", \"\").replace(\"minute\", '.').replace(\"second\", \"\").replace(\"min\", '.').replace(\"sec\", \"\")\n      const [min, sec] = pathname.split(\".\")\n      response = { min: parseInt(min), sec: parseInt(sec) }\n    }\n\n    return response\n  }\n\n  return (\n    <div className=\"App\"\n      style={{\n        height: \"100%\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        position: \"relative\"\n      }}\n    >\n      <div style={{\n        background: \"red\",\n        height: \"inherit\",\n        transition: \"width .2s ease-in\",\n        position: \"absolute\",\n        left: 0,\n        width: `${progressPercentage}%`\n      }}></div>\n      <div \n        style={{ \n          fontSize: \"10rem\",\n          position: \"absolute\",\n          top: 0, left: 0, right: 0, bottom: 0,\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          inset: \"unset\" \n        }}\n      >\n        {time.min.toString().length > 1 ? time.min : `0${time.min}`}:{time.sec.toString().length > 1 ? time.sec : `0${time.sec}`}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}