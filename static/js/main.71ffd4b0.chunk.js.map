{"version":3,"sources":["Components/Timer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Timer","interval","React","useState","min","sec","time","setTime","initialTime","setInitialTime","running","setRunning","progressPercentage","setProgressPercentage","KEY_FUNCTIONS","console","log","eventName","handler","element","window","savedHandler","useRef","useEffect","current","addEventListener","eventListener","event","removeEventListener","useEventListener","key","code","timeFromPath","getTimeFromPath","timeInSec","initialTimeInSec","setInterval","prevTime","clearInterval","response","pathname","location","replace","trim","split","parseInt","className","style","height","display","alignItems","justifyContent","position","background","transition","left","width","fontSize","top","right","bottom","marginLeft","marginRight","inset","toString","length","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.71ffd4b0.chunk.js","sourcesContent":["import React, { useEffect, useRef, useCallback } from 'react';\r\n\r\nconst Timer = () => {\r\n    const [time, setTime] = React.useState({ min: 0, sec: 0 })\r\n    const [initialTime, setInitialTime] = React.useState({ min: 0, sec: 0 })\r\n    const [running, setRunning] = React.useState(false)\r\n    const [progressPercentage, setProgressPercentage] = React.useState(0)\r\n    let interval\r\n\r\n    const KEY_FUNCTIONS = {\r\n        \"Space\": () => {\r\n            console.log('SPACE', running, time);\r\n\r\n            setRunning(!!!running)\r\n        }\r\n    }\r\n    const DEFAULT_KEY = () => null\r\n    function useEventListener(eventName, handler, element = window) {\r\n        // Create a ref that stores handler\r\n        const savedHandler = useRef();\r\n        // Update ref.current value if handler changes.\r\n        // This allows our effect below to always get latest handler ...\r\n        // ... without us needing to pass it in effect deps array ...\r\n        // ... and potentially cause effect to re-run every render.\r\n        useEffect(() => {\r\n            savedHandler.current = handler;\r\n        }, [handler]);\r\n        useEffect(\r\n            () => {\r\n                // Make sure element supports addEventListener\r\n                // On\r\n                const isSupported = element && element.addEventListener;\r\n                if (!isSupported) return;\r\n                // Create event listener that calls handler function stored in ref\r\n                const eventListener = (event) => savedHandler.current(event);\r\n                // Add event listener\r\n                element.addEventListener(eventName, eventListener);\r\n                // Remove event listener on cleanup\r\n                return () => {\r\n                    element.removeEventListener(eventName, eventListener);\r\n                };\r\n            },\r\n            [eventName, element] // Re-run if eventName or element changes\r\n        );\r\n    }\r\n    useEventListener(\"keydown\", (key) => {\r\n        KEY_FUNCTIONS[key.code]() || DEFAULT_KEY()\r\n    })\r\n    React.useEffect(() => {\r\n        const timeFromPath = getTimeFromPath()\r\n        if (timeFromPath.min > 0 || timeFromPath.sec > 0) {\r\n            setTime(timeFromPath)\r\n            setInitialTime(timeFromPath)\r\n        }\r\n    }, [])\r\n\r\n    React.useEffect(() => {\r\n        console.log('TIME CHANGED', time);\r\n        const { min, sec } = time\r\n        const timeInSec = (min * 60) + sec\r\n        const initialTimeInSec = (initialTime.min * 60) + initialTime.sec\r\n        setProgressPercentage((timeInSec * 100) / initialTimeInSec)\r\n    }, [time])\r\n\r\n    React.useEffect(() => {\r\n        if (running && !interval) {\r\n            interval = setInterval(() => {\r\n                setTime(prevTime => {\r\n                    if (prevTime.sec > 0) {\r\n                        return { ...prevTime, sec: prevTime.sec - 1 }\r\n                    } else if (prevTime.sec === 0 && prevTime.min > 0) {\r\n                        return { min: prevTime.min - 1, sec: 59 }\r\n                    } else {\r\n                        setRunning(false)\r\n                        clearInterval(interval)\r\n                        return { min: 0, sec: 0 }\r\n                    }\r\n                })\r\n            }, 1000)\r\n        }\r\n\r\n        return () => {\r\n            clearInterval(interval)\r\n        }\r\n\r\n    }, [running])\r\n\r\n    const getTimeFromPath = () => {\r\n        let response = { min: 0, sec: 0 }\r\n        let pathname = window.location.pathname.replace(\"/timer/\", \"\");\r\n        console.log('pathnname', window.location.pathname);\r\n\r\n        if (pathname.trim()) {\r\n            pathname = pathname.replace(\"minutes\", '.').replace(\"seconds\", \"\").replace(\"minute\", '.').replace(\"second\", \"\").replace(\"min\", '.').replace(\"sec\", \"\")\r\n            const [min, sec] = pathname.split(\".\")\r\n            response = { min: parseInt(min), sec: parseInt(sec) }\r\n        }\r\n\r\n        return response\r\n    }\r\n    return (\r\n        <div className=\"App\"\r\n            style={{\r\n                height: \"100%\",\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n                position: \"relative\"\r\n            }}\r\n        >\r\n            <div style={{\r\n                background: \"red\",\r\n                height: \"inherit\",\r\n                transition: \"width .2s ease-in\",\r\n                position: \"absolute\",\r\n                left: 0,\r\n                width: `${progressPercentage}%`\r\n            }}></div>\r\n            <div\r\n                style={{\r\n                    fontSize: \"10rem\",\r\n                    position: \"absolute\",\r\n                    top: 0, left: 0, right: 0, bottom: 0,\r\n                    marginLeft: \"auto\",\r\n                    marginRight: \"auto\",\r\n                    inset: \"unset\"\r\n                }}\r\n            >\r\n                {time.min.toString().length > 1 ? time.min : `0${time.min}`}:{time.sec.toString().length > 1 ? time.sec : `0${time.sec}`}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Timer\r\n","import React, { useEffect, useRef, useCallback } from 'react';\n\nimport {default as Timer} from './Components/Timer'\nfunction App() {\n\n\n  return (\n    <Timer />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}